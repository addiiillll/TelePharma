Full Stack Developer Assignment 
This	assignment	is	created	to	evaluate	your	capabilities	as	a	Full	Stack	Developer	in	the	
context	of	our	telemedicine	platform.	You	are	expected	to	develop	a	basic	telemedicine	
admin	panel	and	backend	APIs	that	can	simulate	doctor-patient	interactions,	pharmacy	
device	registration,	and	session	low.	
Skills to be Evaluated -	RESTful	API	design	and	implementation	(Node.js/Python/Django/Flask)	-	Database	modeling	(MySQL/PostgreSQL/MongoDB)	-	Admin	dashboard	using	React.js	or	similar	frontend	framework	-	Authentication	&	Authorization	-	Real-time	interactions	(WebSocket/Firebase)	-	Deployment	and	environment	coniguration	
Assignment Scenario 
Imagine	you're	building	the	backend	and	admin	portal	for	a	telemedicine	platform	where	
pharmacies	connect	patients	to	available	doctors.	Your	system	should	allow	registration	of	
pharmacy	devices,	onboarding	of	doctors,	and	real-time	session	management	between	
doctors	and	patients.	
Func onal Requirements -	Backend	API	to	register	pharmacy	device	with	GPS	and	unique	ID	-	Doctor	login/logout	APIs	with	availability	toggle	-	API	to	initiate	a	session	from	a	pharmacy	device	(with	doctor	matching	logic)	-	Admin	panel	with	dashboard	showing:	
•	Online	doctors	
•	Active	sessions	
•	Device	activity	map	(mocked)	-	Frontend	and	backend	should	be	separate	but	integrated	-	Use	JWT	or	session-based	authentication	for	all	secure	routes	
Bonus Features -	WebSocket	or	Firebase	integration	for	real-time	doctor	status	updates	-	Push	noti ication	system	(optional,	mocked)	-	Basic	logging	and	audit	trail	system	in	the	backend	-	Dockerize	the	app	for	local	deployment	
Evalua on Criteria -	API	correctness,	documentation,	and	error	handling	-	Clean,	modular	frontend	architecture	-	Proper	backend	code	structure,	use	of	ORM	-	Deployment	readiness	(README,	env	iles,	Postman	Collection)	-	Responsiveness	and	usability	of	the	admin	panel	
Submission Guidelines 
Submit	the	following	via	GitHub	(or	ZIP	if	necessary):	-	Complete	backend	code	with	README	and	setup	instructions	-	Admin	frontend	code	with	README	-	Database	schema	or	migration	iles	-	Sample	screenshots	or	screen	recording	-	Optional:	Dockerile	or	docker-compose	setu